(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[924],{3905:(t,e,n)=>{"use strict";n.d(e,{Zo:()=>u,kt:()=>m});var r=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var p=r.createContext({}),l=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=l(t.components);return r.createElement(p.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,a=t.originalType,p=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),d=l(n),m=i,g=d["".concat(p,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(g,o(o({ref:e},u),{},{components:n})):r.createElement(g,o({ref:e},u))}));function m(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},18676:(t,e,n)=>{"use strict";n.r(e),n.d(e,{frontMatter:()=>a,metadata:()=>o,toc:()=>s,default:()=>l});var r=n(22122),i=(n(67294),n(3905));const a={title:"Plugins"},o={unversionedId:"api/plugins",id:"api/plugins",isDocsHomePage:!1,title:"Plugins",description:"TypeScriptToLua supports plugins - an interface that allows to customize transpilation behavior.",source:"@site/docs/api/plugins.md",sourceDirName:"api",slug:"/api/plugins",permalink:"/TypeScriptToLua.github.io/docs/api/plugins",editUrl:"https://github.com/TypeScriptToLua/TypeScriptToLua.github.io/edit/source/docs/api/plugins.md",version:"current",frontMatter:{title:"Plugins"},sidebar:"docs",previous:{title:"Overview",permalink:"/TypeScriptToLua.github.io/docs/api/overview"},next:{title:"Printer",permalink:"/TypeScriptToLua.github.io/docs/api/printer"}},s=[{value:"API",id:"api",children:[{value:"<code>visitors</code>",id:"visitors",children:[]},{value:"<code>printer</code>",id:"printer",children:[]}]}],p={toc:s};function l({components:t,...e}){return(0,i.kt)("wrapper",(0,r.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"TypeScriptToLua supports plugins - an interface that allows to customize transpilation behavior."),(0,i.kt)("p",null,"To add a plugin you have to add it under ",(0,i.kt)("inlineCode",{parentName:"p"},"tstl.luaPlugins")," option in the ",(0,i.kt)("a",{parentName:"p",href:"/TypeScriptToLua.github.io/docs/configuration"},"configuration file"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=tsconfig.json",title:"tsconfig.json"},'{\n  "tstl": {\n    "luaPlugins": [\n      // Plugin is a JavaScript module exporting an object\n      { "name": "./plugin1.js" },\n      // TypeScriptToLua can load plugins written in TypeScript using `ts-node`\n      { "name": "./plugin2.ts" },\n      // Plugins can be published to npm\n      { "name": "tstl-plugin-3" }\n    ]\n  }\n}\n')),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"visitors"},(0,i.kt)("inlineCode",{parentName:"h3"},"visitors")),(0,i.kt)("p",null,"Internally, to process ",(0,i.kt)("a",{parentName:"p",href:"https://basarat.gitbook.io/typescript/overview/ast"},"Abstract Syntax Tree")," of a TypeScript program, TypeScriptToLua implements the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Visitor_pattern"},"visitor pattern"),". Visitor is a function, called with a processed node and transformation context, and returning a Lua AST node. Plugins can inject their own visitors using ",(0,i.kt)("inlineCode",{parentName:"p"},"visitors")," property, overriding standard transformation behavior."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import * as ts from "typescript";\nimport * as tstl from "typescript-to-lua";\n\nconst plugin: tstl.Plugin = {\n  // `visitors` is a record where keys are TypeScript node syntax kinds\n  visitors: {\n    // Visitor can be a function that returns Lua AST node\n    [ts.SyntaxKind.ReturnStatement]: () => tstl.createReturnStatement([tstl.createBooleanLiteral(true)]),\n  },\n};\n\nexport default plugin;\n')),(0,i.kt)("p",null,"Example 2:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import * as ts from "typescript";\nimport * as tstl from "typescript-to-lua";\n\nconst plugin: tstl.Plugin = {\n  visitors: {\n    // Visit string literals, if original transformer returns a string literal, change the string to "bar" instead\n    [ts.SyntaxKind.StringLiteral]: (node, context) => {\n      // `context` exposes `superTransform*` methods, that can be used to call either the visitor provided by previous\n      // plugin, or a standard TypeScriptToLua visitor\n      const result = context.superTransformExpression(node);\n\n      // Standard visitor for ts.StringLiteral always returns tstl.StringLiteral node\n      if (tstl.isStringLiteral(result)) {\n        result.value = "bar";\n      }\n\n      return result;\n    },\n  },\n};\n\nexport default plugin;\n')),(0,i.kt)("h3",{id:"printer"},(0,i.kt)("inlineCode",{parentName:"h3"},"printer")),(0,i.kt)("p",null,"Printer is a function that overrides standard implementation of Lua AST printer. It receives some information about the file and transformed Lua AST. See ",(0,i.kt)("a",{parentName:"p",href:"/TypeScriptToLua.github.io/docs/api/printer"},"Printer")," page for more information."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import * as tstl from "typescript-to-lua";\n\nclass CustomLuaPrinter extends tstl.LuaPrinter {}\n\nconst plugin: tstl.Plugin = {\n  printer: (program, emitHost, fileName, block, luaLibFeatures) =>\n    new CustomLuaPrinter(program.getCompilerOptions(), emitHost, fileName).print(block, luaLibFeatures),\n};\n\nexport default plugin;\n')))}l.isMDXComponent=!0}}]);