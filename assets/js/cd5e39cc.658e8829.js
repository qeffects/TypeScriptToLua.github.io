(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[420],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>s,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=c(n),d=i,S=m["".concat(u,".").concat(d)]||m[d]||l[d]||o;return n?r.createElement(S,a(a({ref:t},s),{},{components:n})):r.createElement(S,a({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:i,a[1]=p;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},84475:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>o,metadata:()=>a,toc:()=>p,default:()=>c});var r=n(22122),i=(n(67294),n(3905));const o={title:"Printer"},a={unversionedId:"api/printer",id:"api/printer",isDocsHomePage:!1,title:"Printer",description:"The LuaPrinter class takes Lua AST and prints it to a string (with source map). The printer implements the visitor pattern. All methods visit nodes in the AST to print them to a SourceNode, this will automatically produce correct mappings in the resulting source map.",source:"@site/docs/api/printer.md",sourceDirName:"api",slug:"/api/printer",permalink:"/TypeScriptToLua.github.io/docs/api/printer",editUrl:"https://github.com/TypeScriptToLua/TypeScriptToLua.github.io/edit/source/docs/api/printer.md",version:"current",frontMatter:{title:"Printer"},sidebar:"docs",previous:{title:"Plugins",permalink:"/TypeScriptToLua.github.io/docs/api/plugins"}},p=[{value:"API Reference",id:"api-reference",children:[]}],u={toc:p};function c({components:e,...t}){return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/TypeScriptToLua/TypeScriptToLua/blob/master/src/LuaPrinter.ts"},"LuaPrinter")," class takes Lua AST and prints it to a string (with source map). The printer implements the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Visitor_pattern"},"visitor pattern"),". All methods visit nodes in the AST to print them to a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mozilla/source-map#sourcenode"},(0,i.kt)("inlineCode",{parentName:"a"},"SourceNode")),", this will automatically produce correct mappings in the resulting source map."),(0,i.kt)("h2",{id:"api-reference"},"API Reference"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface PrintResult {\n  code: string;\n  sourceMap: string;\n  sourceMapNode: SourceNode;\n}\n\nclass LuaPrinter {\n  constructor(options: CompilerOptions, emitHost: EmitHost, fileName: string);\n  public print(block: lua.Block, luaLibFeatures: Set<LuaLibFeature>): PrintResult;\n  public printStatement(statement: lua.Statement): SourceNode;\n  public printDoStatement(statement: lua.DoStatement): SourceNode;\n  public printVariableDeclarationStatement(statement: lua.VariableDeclarationStatement): SourceNode;\n  public printVariableAssignmentStatement(statement: lua.AssignmentStatement): SourceNode;\n  public printIfStatement(statement: lua.IfStatement, isElseIf?: boolean): SourceNode;\n  public printWhileStatement(statement: lua.WhileStatement): SourceNode;\n  public printRepeatStatement(statement: lua.RepeatStatement): SourceNode;\n  public printForStatement(statement: lua.ForStatement): SourceNode;\n  public printForInStatement(statement: lua.ForInStatement): SourceNode;\n  public printGotoStatement(statement: lua.GotoStatement): SourceNode;\n  public printLabelStatement(statement: lua.LabelStatement): SourceNode;\n  public printReturnStatement(statement: lua.ReturnStatement): SourceNode;\n  public printBreakStatement(statement: lua.BreakStatement): SourceNode;\n  public printExpressionStatement(statement: lua.ExpressionStatement): SourceNode;\n  public printExpression(expression: lua.Expression): SourceNode;\n  public printStringLiteral(expression: lua.StringLiteral): SourceNode;\n  public printNumericLiteral(expression: lua.NumericLiteral): SourceNode;\n  public printNilLiteral(expression: lua.NilLiteral): SourceNode;\n  public printDotsLiteral(expression: lua.DotsLiteral): SourceNode;\n  public printBooleanLiteral(expression: lua.BooleanLiteral): SourceNode;\n  public printFunctionExpression(expression: lua.FunctionExpression): SourceNode;\n  public printFunctionDefinition(statement: lua.FunctionDefinition): SourceNode;\n  public printTableFieldExpression(expression: lua.TableFieldExpression): SourceNode;\n  public printTableExpression(expression: lua.TableExpression): SourceNode;\n  public printUnaryExpression(expression: lua.UnaryExpression): SourceNode;\n  public printBinaryExpression(expression: lua.BinaryExpression): SourceNode;\n  public printCallExpression(expression: lua.CallExpression): SourceNode;\n  public printMethodCallExpression(expression: lua.MethodCallExpression): SourceNode;\n  public printIdentifier(expression: lua.Identifier): SourceNode;\n  public printTableIndexExpression(expression: lua.TableIndexExpression): SourceNode;\n  public printOperator(kind: lua.Operator): SourceNode;\n  protected pushIndent(): void;\n  protected popIndent(): void;\n  protected indent(input?: SourceChunk): SourceChunk;\n  protected createSourceNode(node: lua.Node, chunks: SourceChunk | SourceChunk[], name?: string): SourceNode;\n  protected concatNodes(...chunks: SourceChunk[]): SourceNode;\n  protected printBlock(block: lua.Block): SourceNode;\n  protected printStatementArray(statements: lua.Statement[]): SourceChunk[];\n  protected isStatementEmpty(statement: lua.Statement): boolean;\n  protected joinChunks(separator: string, chunks: SourceChunk[]): SourceChunk[];\n  protected printExpressionList(expressions: lua.Expression[]): SourceChunk[];\n}\n")))}c.isMDXComponent=!0}}]);