(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[643],{3905:(e,t,r)=>{"use strict";r.d(t,{Zo:()=>c,kt:()=>g});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(r),g=i,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||l;return r?n.createElement(d,a(a({ref:t},c),{},{components:r})):n.createElement(d,a({ref:t},c))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=r.length,a=new Array(l);a[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var p=2;p<l;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},75515:(e,t,r)=>{"use strict";r.r(t),r.d(t,{frontMatter:()=>l,metadata:()=>a,toc:()=>o,default:()=>p});var n=r(22122),i=(r(67294),r(3905));const l={title:"Overview"},a={unversionedId:"api/overview",id:"api/overview",isDocsHomePage:!1,title:"Overview",description:"High-level API",source:"@site/docs/api/overview.md",sourceDirName:"api",slug:"/api/overview",permalink:"/TypeScriptToLua.github.io/docs/api/overview",editUrl:"https://github.com/TypeScriptToLua/TypeScriptToLua.github.io/edit/source/docs/api/overview.md",version:"current",frontMatter:{title:"Overview"},sidebar:"docs",previous:{title:"JSX",permalink:"/TypeScriptToLua.github.io/docs/jsx"},next:{title:"Plugins",permalink:"/TypeScriptToLua.github.io/docs/api/plugins"}},o=[{value:"High-level API",id:"high-level-api",children:[{value:"TranspileString",id:"transpilestring",children:[]},{value:"TranspileFiles",id:"transpilefiles",children:[]},{value:"TranspileProject",id:"transpileproject",children:[]},{value:"TranspileVirtualProject",id:"transpilevirtualproject",children:[]}]},{value:"Low-level API",id:"low-level-api",children:[{value:"Transpile",id:"transpile",children:[]}]}],s={toc:o};function p({components:e,...t}){return(0,i.kt)("wrapper",(0,n.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"high-level-api"},"High-level API"),(0,i.kt)("p",null,"The high level API allows you to simply invoke several common transpiler operations using well-known language primitives, handling usage of TypeScript API for you."),(0,i.kt)("h3",{id:"transpilestring"},"TranspileString"),(0,i.kt)("p",null,"Transpile a string containing TypeScript source code to Lua."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Source: string - The TypeScript source code to transpile."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[Optional]")," Options: tstl.CompilerOptions - CompilerOptions to use.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import * as tstl from "typescript-to-lua";\n\nconst result = tstl.transpileString(`const foo = "bar";`, { luaTarget: tstl.LuaTarget.Lua53 });\nconsole.log(result.diagnostics);\nconsole.log(result.file);\n')),(0,i.kt)("h3",{id:"transpilefiles"},"TranspileFiles"),(0,i.kt)("p",null,"Transpile a collection of TypeScript files to Lua."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"FileNames: string[] - An array of file paths to the TypeScript files to be transpiled."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[Optional]")," Options: tstl.CompilerOptions - CompilerOptions to use.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import * as tstl from "typescript-to-lua";\n\nconst result = tstl.transpileFiles(["file1.ts", "file2.ts"], { luaTarget: tstl.LuaTarget.Lua53 });\nconsole.log(result.diagnostics);\nconsole.log(result.emitResult);\n')),(0,i.kt)("h3",{id:"transpileproject"},"TranspileProject"),(0,i.kt)("p",null,"Transpile a TypeScript project to Lua."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"tsConfigPath: string - The file path to a TypeScript project's ",(0,i.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[Optional]")," extendedOptions: tstl.CompilerOptions - The tsConfig already contains options, this extends those options.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import * as tstl from "typescript-to-lua";\n\nconst result = tstl.transpileProject("tsconfig.json", { luaTarget: tstl.LuaTarget.Lua53 });\nconsole.log(result.diagnostics);\nconsole.log(result.emitResult);\n')),(0,i.kt)("h3",{id:"transpilevirtualproject"},"TranspileVirtualProject"),(0,i.kt)("p",null,"Transpile a virtual project to Lua. A virtual project is a record (like an object literal for example) where keys are file names, and values are the contents of these files. This can be used to transpile a collection of files without having these files physically on disk."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Files: Record<string, string> - A record of fileName keys and fileContent values."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[Optional]")," Options: tstl.CompilerOptions - CompilerOptions to use.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import * as tstl from "typescript-to-lua";\n\nconst result = tstl.transpileVirtualProject(\n  {\n    "file1.ts": `const foo = "bar";`,\n    "file2.ts": `const bar = "baz";`,\n  },\n  { luaTarget: tstl.LuaTarget.Lua53 },\n);\nconsole.log(result.diagnostics);\nconsole.log(result.transpiledFiles);\n')),(0,i.kt)("h2",{id:"low-level-api"},"Low-level API"),(0,i.kt)("p",null,"On the contrast with high-level API, low-level API requires you to to manage TypeScript project yourself. See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API"},"Using the Compiler API")," page for the introduction to TypeScript API."),(0,i.kt)("h3",{id:"transpile"},"Transpile"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"program: ts.Program - The TypeScript program to transpile (note: unlike the high-level API, compilerOptions is part of the program and cannot be supplied separately)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[Optional]")," sourceFiles: ts.SourceFile[] - A collection of ",(0,i.kt)("inlineCode",{parentName:"li"},"SourceFile"),"s to transpile, ",(0,i.kt)("inlineCode",{parentName:"li"},"program.getSourceFiles()")," by default."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[Optional]")," customTransformers: ts.CustomTransformers - List of extra ",(0,i.kt)("a",{parentName:"li",href:"/TypeScriptToLua.github.io/docs/configuration#transformers"},"TypeScript transformers"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[Optional]")," plugins: tstl.Plugin[] - List of ",(0,i.kt)("a",{parentName:"li",href:"/TypeScriptToLua.github.io/docs/api/plugins"},"TypeScriptToLua plugins"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[Optional]")," emitHost: tstl.EmitHost - Provides the methods for reading/writing files, useful in cases where you need something other than regular reading from disk. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"ts.sys"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const reportDiagnostic = tstl.createDiagnosticReporter(true);\nconst configFileName = path.resolve(__dirname, "tsconfig.json");\nconst parsedCommandLine = tstl.parseConfigFileWithSystem(configFileName);\nif (parsedCommandLine.errors.length > 0) {\n  parsedCommandLine.errors.forEach(reportDiagnostic);\n  return;\n}\n\nconst program = ts.createProgram(parsedCommandLine.fileNames, parsedCommandLine.options);\nconst { transpiledFiles, diagnostics: transpileDiagnostics } = tstl.transpile({ program });\n\nconst emitResult = tstl.emitTranspiledFiles(options, transpiledFiles);\nemitResult.forEach(({ name, text }) => ts.sys.writeFile(name, text));\n\nconst diagnostics = ts.sortAndDeduplicateDiagnostics([...ts.getPreEmitDiagnostics(program), ...transpileDiagnostics]);\ndiagnostics.forEach(reportDiagnostic);\n')))}p.isMDXComponent=!0}}]);